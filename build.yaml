trigger:
  branches: 
    include: 
      - '*'

pool:
  name: SelfHosted-Unity

variables:
  - name: godot_version
    value: '4.3'

steps:
  - checkout: self

  - task: PowerShell@2
    displayName: 'Download Godot'
    inputs:
      targetType: 'inline'
      script: |
        Invoke-WebRequest https://github.com/godotengine/godot-builds/releases/download/4.3-stable/Godot_v4.3-stable_win64.exe.zip -OutFile $(Agent.TempDirectory)/godot.zip

  - task: ExtractFiles@1
    displayName: "Extract Godot executable files"
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)/godot.zip'
      destinationFolder: '$(Agent.ToolsDirectory)/godot'

  - task: PowerShell@2
    displayName: 'Download Godot Templates'
    inputs:
      targetType: 'inline'
      script: |
        Invoke-WebRequest https://downloads.tuxfamily.org/godotengine/4.3/Godot_v4.3-stable_export_templates.tpz -OutFile $(Agent.TempDirectory)/Godot_v4.3-stable_export_templates.tpz
  
  - task: ExtractFiles@1
    displayName: "Extract Godot export templates"
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)/Godot_v4.3-stable_export_templates.tpz'
      destinationFolder: '$(Agent.ToolsDirectory)/godot/export_templates/4.3-stable'


  - task: PowerShell@2
    displayName: 'Build Project Godot'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "$(Agent.ToolsDirectory)"
        mkdir $(Build.SourcesDirectory)\build
        $(Agent.ToolsDirectory)\godot\Godot_v4.3-stable_win64.exe --path $(Build.SourcesDirectory) --export-release "Windows Desktop" $(Build.SourcesDirectory)\build --headless -v -e --quit --audio-driver "Dummy"
        Write-Host "$(Build.SourcesDirectory)"

  # Copy build output files to artifact staging directory.
  - task: CopyFiles@2
    inputs:
      SourceFolder: .\build
      Contents: '**'
      TargetFolder: $(Build.ArtifactStagingDirectory)
      CleanTargetFolder: true
      OverWrite: true

  # Archive files v2
  # Compress files into .7z, .tar.gz, or .zip.
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)' # string. Required. Root folder or file to archive. Default: $(Build.BinariesDirectory).
      includeRootFolder: true # boolean. Required. Prepend root folder name to archive paths. Default: true.
    # Archive
      archiveType: 'zip' # 'zip' | '7z' | 'tar' | 'wim'. Required. Archive type. Default: zip.
      #sevenZipCompression: 'normal' # 'ultra' | 'maximum' | 'normal' | 'fast' | 'fastest' | 'none'. Optional. Use when archiveType = 7z. 7z compression. Default: normal.
      #tarCompression: 'gz' # 'gz' | 'bz2' | 'xz' | 'none'. Optional. Use when archiveType = tar. Tar compression. Default: gz.
      archiveFile: '$(Build.ArtifactStagingDirectory)/Sunfall.zip' # string. Required. Archive file to create. Default: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip.
      replaceExistingArchive: true # boolean. Required. Replace existing archive. Default: true.
      #verbose: false # boolean. Force verbose output. Default: false.
      #quiet: false # boolean. Force quiet output. Default: false.


  # Finally publish all items in artifact staging to the Azure Pipelines
  # artifact storage. They will be available for sharing and/or further processing there.
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: drop
      publishLocation: Container